<?php
	require_once APPLICATION_PATH.'/includes/header.php';
	
	$client = new Client();
    $client->populate(decode($request->id));
	$id = $client->getID();
	// debugMessage($client->toArray());
	
	$posturl = $this->baseUrl("client/edit"); 
	$successmessage = $this->translate('profile_update_success');
	$listurl = $this->baseUrl('client/list');
	
	$tab = $request->tab;
	$tabtitle = 'Profile';
	if(isEmptyString($request->tab)){
		$request->setParam('tab', 'profile'); 
		$tab = 'profile';
	}

	$section = $request->section;
	$step = $request->step;
	if(isEmptyString($request->step)){
		$request->setParam('step', 'view');
		$step = 'view';
	}
	
	if($tab == 'profile'){
		if(isEmptyString($request->section)){
			$request->setParam('section', 'bio');
			$section = 'bio';
		}
		
		// dropdown data
		$maritalstatuses = getAllMaritalStatuses();
		$educationlevels = getEducationLevels();
		$races = getAllRaces();
		$programs = getPrograms();
		$funders = getFunders();
		$services = getServiceTypes();
		$disabilitycodes = getDisabilityDiagnosisCodes();
		$causecodes = getDisabilityCauseCodes();
		$communicationtypes = getCommunicationLevels();
		$housingtypes = getHousingTypes();
		$skills = getAllClientSkills();
		$states = getStates();
		$counties = getAllCounties();
	}
	
	if($tab == 'employment'){
		$states = getStates();
		$counties = getAllCounties();
	}
	
	if($tab == 'voucher'){
		$services = getServiceTypes();
		$programs = getPrograms();
		$funders = getFunders();
		$voucherstatuses = getVoucherStatuses();
	}
	
	$title = $client->getName();
	$description = 'Profile Details';	
	$this->headTitle($title.$browserappend);
?>
<script type="text/javascript" src="<?php echo $this->serverUrl($this->baseUrl('javascript/plugins/jquery.form.min.js')); ?>"></script>
<script>
	$(document).ready(function() {
		$('.titlebreadcrumb').html('<?php echo $homedir.'Clients / '.$client->getName(); ?>');
		$('.titlelabel').html('<?php echo $title; ?>');
		$('.desclabel').html('<?php echo $description; ?>');
		$('.pageicon').html('<span class="glyphicon glyphicon-list-alt"></span>');
		
		// custom date picker options
		var dateofbirthOpts = datepickerOpts;
		var startfrom = '<?php echo date('Y'); ?>';
		dateofbirthOpts.yearRange = "-<?php echo date('Y')-1900; ?>:-0"; 
		dateofbirthOpts.minDate = "-<?php echo date('Y'); ?>Y";
		datepickerOpts.maxDate = new Date("Dec 31, "+startfrom);	
		$("#dateofbirth").datepicker(dateofbirthOpts);
		
		dateofbirthOpts.yearRange = "-<?php echo date('Y')-2010; ?>:-0"; 
		datepickerOpts.maxDate = new Date();
		$("#dateapproved, #startdate, #enddate, #invoicedate, #medicalstartdate").datepicker(dateofbirthOpts);
		
		var tab = '<?php echo $tab; ?>';
		$("#tabtitle").html($("#tab_"+tab+" a."+tab).html());
		
		// hide edit controls by default
		$('.edit, .requiredmark, .save_trigger, .cancel_trigger').addClass('hidden');
		
		<?php if($tab == 'profile' && $step == 'edit'){ ?>
			var section = '<?php echo $section; ?>';
			$('#collapse_'+section+' .edit, #collapse_'+section+' .requiredmark, #collapse_'+section+' .save_trigger, #collapse_'+section+' .cancel_trigger').removeClass('hidden');
			$('#collapse_'+section+' .view, #collapse_'+section+' .update_trigger').addClass('hidden');
			
			$('#collapse_'+section+' .edit .form-control').attr('readonly', false).attr('disabled', false);
			$('.panel-collapse .edit .form-control:not(#collapse_'+section+' .edit .form-control)').attr('readonly', true).attr('disabled', true);
			// maintain settings disable and readonly settings for dateofbirth, state, dateapproved
			if(section == 'bio'){
				$("#dateofbirth").attr('readonly', true);
				$("#state").attr('readonly', true).attr('disabled', true);
			}
			if(section == 'referral'){
				$("#dateapproved, #startdate").attr('readonly', true);
			}
		
			// on trigger update, show update fields for a particular section. also cancel any other open fields for update in other sections
			$(".update_trigger").click(function(){
				var section = $(this).attr('section');
				$('#collapse_'+section+' .edit, #collapse_'+section+' .requiredmark, #collapse_'+section+' .save_trigger, #collapse_'+section+' .cancel_trigger').removeClass('hidden');
				$('#collapse_'+section+' .view, #collapse_'+section+' .update_trigger').addClass('hidden');
				$('#collapse_'+section+' .edit .form-control').attr('readonly', false).attr('disabled', false);
				$('.panel-collapse .cancel_trigger:not(#collapse_'+section+' .cancel_trigger)').click();
				// maintain settings disable and readonly settings for dateofbirth, state, dateapproved
				if(section == 'bio'){
					$("#dateofbirth").attr('readonly', true);
					$("#state").attr('readonly', true).attr('disabled', true);
				}
				if(section == 'referral'){
					$("#dateapproved, #startdate").attr('readonly', true);
				}
			});
			
			// on trigger cancel, hide edit fields and show view for each section. 
			$(".cancel_trigger").click(function(){
				var section = $(this).attr('section');
				$('#collapse_'+section+' .edit, #collapse_'+section+' .requiredmark, #collapse_'+section+' .save_trigger, #collapse_'+section+' .cancel_trigger').addClass('hidden');
				$('#collapse_'+section+' .view, #collapse_'+section+' .update_trigger').removeClass('hidden');
				$('#collapse_'+section+' .edit .form-control').attr('readonly', true).attr('disabled', true);
			});
			
			// save changes
			$(".save_trigger").click(function(e){
				e.preventDefault();
				var section = $(this).attr('section');
				$("#successurl").val(base64_encode('<?php echo $this->baseUrl('client/view/id/'.encode($client->getID()).'/tab/'.$tab.'/section/'); ?>'+section));
				$("#failureurl").val(base64_encode('<?php echo $this->baseUrl('client/view/id/'.encode($client->getID()).'/tab/'.$tab.'/step/edit/section/'); ?>'+section));
				if ($("#form-profile").valid()) {
					$.blockUI({ message: '<?php echo $blockcontent; ?>' }); 
					$("#form-profile").submit();
				}
			});
			
			// validation 
			$("#form-profile").validate({		
				// define the validation rules one field at a time
				rules: {
					firstname: {
						required: true
					},
					lastname: {
						required: true
					},
					gender: {
						required: true
					},
					ssn: {
						required: true
					},
					programid: {
						required: true
					},
					funderid: {
						required: true
					},
					servicetypeid: {
						required: true
					},
					hours: {
						required: true
					},
					rate: {
						required: true
					},
					voucherno: {
						required: true
					},
					resumefilename: {
						required: true
					},		
					dateapproved: {
						required: true
					},
					startdate: {
						required: true
					},
					primarydiagnosis: {
						required: true
					},
					primarycause: {
						required: true
					},
					employmentgoal: {
						required: true
					},
					email: {
						email: true
					}
					contactemail: {
						email: true
					}
				}, 
				// the messages for each of the fields being validated
				messages: {		
					firstname: {
						required: "<?php echo $this->translate("client_firstname_error"); ?>"
					},
					lastname: {
						required: "<?php echo $this->translate("client_lastname_error"); ?>"
					},
					gender: {
						required: "<?php echo $this->translate("client_gender_error"); ?>"
					},
					ssn: {
						required: "<?php echo $this->translate("client_ssn_error"); ?>"
					},
					programid: {
						required: "<?php echo $this->translate("client_programid_error"); ?>"
					},
					funderid: {
						required: "<?php echo $this->translate("client_funderid_error"); ?>"
					},
					servicetypeid: {
						required: "<?php echo $this->translate("client_servicetypeid_error"); ?>"
					},
					hours: {
						required: "<?php echo $this->translate("client_hours_error"); ?>"
					},
					rate: {
						required: "<?php echo $this->translate("client_rate_error"); ?>"
					},
					voucherno: {
						required: "<?php echo $this->translate("client_voucherno_error"); ?>"
					},
					resumefilename: {
						required: "<?php echo $this->translate("client_resumefilename_error"); ?>"
					},				
					dateapproved: {
						required: "<?php echo $this->translate("client_dateapproved_error"); ?>"
					},
					startdate: {
						required: "<?php echo $this->translate("client_datereceived_error"); ?>"
					},
					primarydiagnosis: {
						required: "<?php echo $this->translate("client_primarydiagnosis_error"); ?>"
					},
					primarycause: {
						required: "<?php echo $this->translate("client_primarycause_error"); ?>"
					},
					employmentgoal: {
						required: "<?php echo $this->translate("client_employmentgoal_error"); ?>"
					},
					email: {
						email: "<?php echo $this->translate("profile_email_invalid_error"); ?>"
					},
					contactemail: {
						email: "<?php echo $this->translate("profile_email_invalid_error"); ?>"
					}
				},
				// custom error positions
				errorPlacement: function(error, element) {
					switch(element.attr("name")){					
						default:
							if(element.hasClass("useid_error")){
								error.appendTo("#"+element.attr("id")+"_error");
							} else {
								error.appendTo("#"+element.attr("name")+"_error");
							}
							break;
					}			
				}
			});
			
			// show or hide containers for resume and cover documents 
			<?php if($client->hasResume()){ ?>
				$("#aftersave_resume").addClass('show').removeClass('hidden');
				$("#beforesave_resume").addClass('hidden').removeClass('show');
			<?php } ?>
			<?php if($client->hasCoverletter()){ ?>
				$("#aftersave_cover").addClass('show').removeClass('hidden');
				$("#beforesave_cover").addClass('hidden').removeClass('show');
			<?php } ?>
			
			// add filename of selected file in background of input to indicate that a file has been selected.
			$("#resumefilename").change(function(){
				if(!isEmptyString($(this).val())){
					$("#beforesave_resume .fileinput-preview").html($(this).val());
				}
			});
			$("#coverletterfilename").change(function(){
				if(!isEmptyString($(this).val())){
					$("#beforesave_cover .fileinput-preview").html($(this).val());
				}
			});
			
			$(".reupload").click(function(e){
				e.preventDefault();
				var type = $(this).attr('rel');
				var message = '<label class="small centeralign blocked">Note that Re-Uploading this file while delete and replace the existing one. <br /><br /> Click <b>OK</b> to continue or <b>Cancel</b> to ignore</label>';
				bootbox.confirm(message, function(confirmed) {
					if(confirmed){
						// remove the file via ajax
						$(this).hide();
						$("#loading_"+type).removeClass('hidden');
						
						$.get("<?php echo $this->baseUrl('client/removeupload/id/'.$client->getID().'/'); ?>type/"+type, 
						   {                        
							cachebuster: new Date().getTime()},                            
							function(data){                        
								// alert(data);      
								$("#beforesave_"+type+"").addClass('show').removeClass('hidden');                  
								$("#aftersave_"+type+", #reupload_"+type+", #loading_"+type).addClass('hidden').removeClass('show');
							}
						);
					} else {
						bootbox.hideAll();
						return false;
					}
				});
			});
		<?php } ?>
		
		<?php if($tab == 'employment' && ($step == 'edit' || $step == 'new')){ ?>
			// validation 
			$("#form-employment").validate({		
				// define the validation rules one field at a time
				rules: {
					jobtitle: "required",
					hoursperweek: {
						required: true
					},
					startdate: {
						required: true,
					},
					enddate: {
						required: false,
						ontermination:true,
						enddateafterstartdate: true
					},
					rate: {
						required: true
					},
					ratetype: "required",
					startdate: "required",
					status: "required",
					companyname: "required",
					contactperson: "required",
					phone: "required",
					county: "required", 
					city: "required", 
					zipcode: "required",  
					addressline1: "required",
					terminationtype: "required",
					terminationreason: "required"
				}, 
				// the messages for each of the fields being validated
				messages: {		
					jobtitle: "<?php echo $this->translate("job_jobtitle_error"); ?>",
					hoursperweek: {
						required: "<?php echo $this->translate("job_hoursperweek_error"); ?>"
					}, 
					startdate: {
						required: "<?php echo $this->translate("job_startdate_error"); ?>"
					},
					rate: {
						required: "<?php echo $this->translate("job_rate_error"); ?>"
					},
					ratetype: "<?php echo $this->translate("job_ratetype_error"); ?>",
					startdate: "<?php echo $this->translate("job_startdate_error"); ?>",
					status: "<?php echo $this->translate("job_status_error"); ?>",
					companyname: "<?php echo $this->translate("company_name_error"); ?>",
					contactperson: "<?php echo $this->translate("company_contactperson_error"); ?>",
					phone: "<?php echo $this->translate("company_phone_error"); ?>",
					county: "<?php echo $this->translate("company_county_error"); ?>", 
					city: "<?php echo $this->translate("company_city_error"); ?>", 
					zipcode: "<?php echo $this->translate("company_zipcode_error"); ?>",  
					addressline1: "<?php echo $this->translate("company_addressline1_error"); ?>",
					terminationtype: "<?php echo $this->translate("job_terminationtype_error"); ?>",
					terminationreason: "<?php echo $this->translate("job_terminationreason_error"); ?>"
				},
				// custom error positions
				errorPlacement: function(error, element) {
					switch(element.attr("name")){					
						default:
							if(element.hasClass("useid_error")){
								error.appendTo("#"+element.attr("id")+"_error");
							} else {
								error.appendTo("#"+element.attr("name")+"_error");
							}
							break;
					}			
				}
			});
			
			$.validator.addMethod("ontermination", function(value, element) {				
				if($("#status").val() == '0' && isEmptyString(value)){
					return false;
				}
				return true;
			}, "<?php echo $this->translate("job_enddate_error"); ?>");
			
			$('.edit, .requiredmark, .save_trigger, .cancel_trigger').removeClass('hidden');
			$('.form-control-static.view, .update_trigger').addClass('hidden');
			
			// on status change, if terminating job, open up fields for reason and termination type
			$("#status").change(function(){
				var status = $(this).val();
				if(status == 0){
					$(".complete").removeClass('hidden');
				}
				if(status == 1){
					$("#enddate, #terminationreason, #terminationreason").val('');
					$(".complete").addClass('hidden');										
				}
			});
			$("#status").trigger('change');
			
			$(".save_trigger, .save").click(function(e){
				e.preventDefault();
				var status = $("#status").val();
				if ($("#form-employment").valid()) {
					if(status == 1){
						$.blockUI({ message: '<?php echo $blockcontent; ?>' }); 
						$("#form-employment").submit();
					}
					if(status == 0){
						// if attempting to terminate the job
						var message = '<label class="small centeralign blocked">Are you sure you want to mark this Job as completed. <br /><br /> Click <b>OK</b> to continue or <b>Cancel</b> to ignore</label>';
						bootbox.confirm(message, function(confirmed) {
							if(confirmed){
								$.blockUI({ message: '<?php echo $blockcontent; ?>' }); 
								$("#form-employment").submit();
							} else {
								bootbox.hideAll();
								return false;
							}
						});
					}
				}
			});
		<?php } ?>
		
		<?php if($tab == 'employment' && $step == 'view'){ ?>
			$(".complete").addClass('hidden');
		<?php } ?>
		
		<?php if($tab == 'voucher' && ($step == 'edit' || $step == 'new')){ ?>
			// validation 
			$("#form-voucher").validate({		
				// define the validation rules one field at a time
				rules: {
					funderid: {
						required: true
					},
					servicetypeid: {
						required: true
					},
					hours: {
						required: true
					},
					rate: {
						required: true
					},
					voucherno: {
						required: true
					},
					days: {
						required: true
					},		
					dateapproved: {
						required: true
					},
					startdate: {
						required: true
					}
				}, 
				// the messages for each of the fields being validated
				messages: {		
					funderid: {
						required: "<?php echo $this->translate("voucher_funderid_error"); ?>"
					},
					servicetypeid: {
						required: "<?php echo $this->translate("voucher_servicetypeid_error"); ?>"
					},
					hours: {
						required: "<?php echo $this->translate("voucher_hours_error"); ?>"
					},
					rate: {
						required: "<?php echo $this->translate("voucher_voucherrate_error"); ?>"
					},
					voucherno: {
						required: "<?php echo $this->translate("voucher_voucherno_error"); ?>"
					},
					days: {
						required: "<?php echo $this->translate("voucher_days_error"); ?>"
					},				
					dateapproved: {
						required: "<?php echo $this->translate("voucher_dateapproved_error"); ?>"
					},
					startdate: {
						required: "<?php echo $this->translate("voucher_startdate_error"); ?>"
					}
				},
				// custom error positions
				errorPlacement: function(error, element) {
					switch(element.attr("name")){					
						default:
							if(element.hasClass("useid_error")){
								error.appendTo("#"+element.attr("id")+"_error");
							} else {
								error.appendTo("#"+element.attr("name")+"_error");
							}
							break;
					}			
				}
			});
			
			$('.edit, .requiredmark, .save_trigger, .cancel_trigger').removeClass('hidden');
			$('.form-control-static.view, .update_trigger').addClass('hidden');
			
			$(".save_trigger, .save").click(function(e){
				e.preventDefault();
				var status = $("#status").val();
				if ($("#form-voucher").valid()) {
					$.blockUI({ message: '<?php echo $blockcontent; ?>' }); 
					$("#form-voucher").submit();
				}
			});
		<?php } ?>
	});
</script>
<div class="row-fluid margin0 view">
    <div class="col-md-12 padding0">
    	<div class="headerbox">
            <table class="table border0 nohover margin0">                       
                <tr>		                    
                    <td class="padding2">
                        <?php if ($acl->checkPermission('Client', ACTION_LIST)) { ?>	
                            <a class="btn btn-default btn-sm" href="<?php echo $this->baseUrl('client/list'); ?>"><i class="glyphicon glyphicon-list"></i> Clients</a>
                        <?php } ?>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <?php if ($sessionhaserror) { ?>
        <div class="alert alert-danger"><?php echo $session->getVar(ERROR_MESSAGE); ?></div>
    <?php } ?>
    <?php if (!isEmptyString($session->getVar(SUCCESS_MESSAGE))) { ?>
        <div class="alert alert-success alert-dismissable"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button> <?php echo $session->getVar(SUCCESS_MESSAGE); ?></div>
    <?php } ?>
    <div id="tabs">
        <?php require APPLICATION_PATH."/views/scripts/client/leftcolumn.phtml"; ?>
        <div class="col-md-9 tab-content makerelative padding0 xtestborder clearfix" id="center">
        	<h4 id="tabtitle"></h4>
        	<div id="profile">
            	<?php if($tab == 'profile'){ ?>
                    <?php require APPLICATION_PATH."/views/scripts/client/profile.phtml"; ?>
				<?php } ?>
			</div> 
            <div id="employment">
            	<?php if($tab == 'employment'){ ?>
                	<?php require APPLICATION_PATH."/views/scripts/client/employment.phtml"; ?>
                <?php } ?>
			</div>
            <div id="voucher">
				<?php if($request->tab == 'voucher'){ ?>
                	<?php if($tab == 'voucher'){ ?>
						<?php require APPLICATION_PATH."/views/scripts/client/voucher.phtml"; ?>
                    <?php } ?>
                <?php } ?>
			</div>
            <div id="activity">
                <form id="form-activity" class="form-horizontal activity">
				<?php if($request->tab == 'activity'){ ?>
                
                <?php } ?>
                </form>
			</div>
            <div id="finance">
                <form id="form-finance" class="form-horizontal finance">
                <?php if($request->tab == 'activity'){ ?>
                
                <?php } ?>
                </form>
			</div>
            <div id="report">
                <form id="form-report" class="form-horizontal report">
                <?php if($request->tab == 'report'){ ?>
                
                <?php } ?>
                </form>
			</div>
     	</div> 
    </div>
</div>    
<?php
	require_once APPLICATION_PATH.'/includes/footer.php';
?>
